package changelog;

import gui.UserManagement;
import hibernateEntitySets.DataLog_DataChanges;
import hibernateEntitySets.TAggregated_Data;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;

import databaseconnection.InitEntityManager;

/**
 * Manage the logging for the Tool 
 * 
 * @author ZIMM051
 * 
 */
public class ChangeLog {

    private List<DataLog_DataChanges> dataLogs;

    // write the changes to the DB
    public void log() {

        EntityManager em = InitEntityManager.getHVEntityManager();

        for (DataLog_DataChanges datalog : this.dataLogs) {
            em.merge(datalog);
        }

    }

    public void addDataLog_DataChanges(DataLog_DataChanges dataLog) {

        if (this.dataLogs == null) {
            this.dataLogs = new ArrayList<DataLog_DataChanges>();
        }
        this.dataLogs.add(dataLog);
    }

    public List<DataLog_DataChanges> getDataLogs() {
        return dataLogs;
    }

    public DataLog_DataChanges getDataLogBasic(TAggregated_Data aggregatedData) {

        DataLog_DataChanges dataLog = new DataLog_DataChanges();

        // nodeID for the table TAGGREGATED_DATA
        dataLog.setDc_node_id(20600);

        // PK from the table
        dataLog.setDc_record_id(aggregatedData.getAggregated_Data_ID());

        // operation (1=insert; 2=update; 3=delete)
        dataLog.setDc_dv_type((short) 2);

        dataLog.setDc_reason(null);

        // name of the application
        dataLog.setDc_application_name("INC");

        dataLog.setDc_label(null);

        // date
        dataLog.setDc_date_inserted(new Date());

        // ?
        dataLog.setDc_foreign_id(0);

        if (UserManagement.getLoggedUser() != null) {
            // user ID
            dataLog.setDc_us_id_inserted(UserManagement.getLoggedUser().getUserId());

            // memberId
            dataLog.setDc_cu_id(UserManagement.getLoggedUser().getMemberId());
        }
        return dataLog;
    }

    public String createXMLString(TAggregated_Data aggregatedData) {

        // create an xml
        XMLForChangeLog xml = new XMLForChangeLog();

        // get a xml display of the Aggredated_Data
        return xml.createLoggingXMLString(aggregatedData);

    }
}
