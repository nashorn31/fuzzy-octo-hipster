package asp.inc.guitest;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.IsEqual.equalTo;

import java.util.List;

import javax.persistence.EntityManager;

import org.junit.Before;
import org.junit.Test;

import asp.inc.databaseconnectiontest.InitTestConnection;
import asp.inc.gui.MainPageBean;
import asp.inc.hibernateentitysets.DataLogDataChanges;
import asp.inc.searchdb.SearchResults;
import asp.inc.searchdbtest.SearchResultsTest;

public class MainPageBeanTest {

    private MainPageBean  mpb;
    private SearchResults searchResults;
    private EntityManager emHV  = InitTestConnection.getHVTestEntityManager();
    private EntityManager emNHV = InitTestConnection.getNHVTestEntityManager();

    @Before
    public void initABean() {
        InitTestConnection.setDBvaluesToStart();
        mpb = new MainPageBean();
        mpb.setEntityManagerHV(emHV);
        mpb.setEntityManagerNHV(emNHV);

        mpb.search();
        mpb.setMandantid("2");
        mpb.setRecipientID("112");
        mpb.search();
        searchResults = mpb.getSearchResults();
        InitTestConnection.setDBvaluesToStart();
    }

    @Test
    public void intitMainPageBeanTest() {
        mpb.intitMainPageBean();

        assertThat(mpb.getConfirmText(), equalTo("Bitte zuerst suchen."));
    }

    @Test
    public void completeMandantidTest() {
        List<String> mandantIds = mpb.completeMandantid("1");
        assertThat(mandantIds.get(0), equalTo("11"));
    }

    @Test
    public void completeDebitorNumberTestMandantIsNotSet() {
        mpb.setMandantid("");
        mpb.completeDebitorNumber("");
        assertThat(mpb.getStatus(), equalTo("Bitte geben sie eine MandantenID oder Mandanten ein."));
    }

    @Test
    public void completeDebitorNumberTestMandantIsSet() {
        mpb.setMandantid("2");

        assertThat(mpb.completeDebitorNumber("1").get(0), equalTo("11"));
    }

    @Test
    public void completeRecipientIDTestMandantIsNotSet() {
        mpb.setMandantid("");
        mpb.completeRecipientID("");
        assertThat(mpb.getStatus(), equalTo("Bitte geben sie eine MandantenID oder Mandanten ein."));
    }

    @Test
    public void completeRecipientIDTestMandantIsSet() {
        mpb.setMandantid("2");

        assertThat(mpb.completeRecipientID("1").get(0), equalTo("112"));
    }

    @Test
    public void assumeValueToNameTestMandantIsNotSet() {
        mpb.assumeValueToName();
        assertThat(mpb.getStatus(), equalTo("Bitte geben sie eine MandantenID oder Mandanten ein."));
    }

    @Test
    public void assumeValueToIDTestMandantIsNotSet() {
        mpb.setMandantid("");
        mpb.assumeValueToID();
        assertThat(mpb.getStatus(), equalTo("Bitte geben sie eine MandantenID oder Mandanten ein."));
    }

    @Test
    public void switchDebitorTest() {

        mpb.setSearchResults(searchResults);
        mpb.setSelectedRecipient(searchResults.getRecipients().get(0));
        searchResults.getRecipients().get(0).setSelected(true);
        mpb.switchDebitor();
    }

    @Test
    public void resetIncassoFlagTest() {

        SearchResults searchResults = new SearchResultsTest().createSearchResults();

        searchResults.getRecipients().get(0).setSelected(true);
        searchResults.getRecipients().get(0).setIncasso(true);

        searchResults.getDebitors().get(1).setSelected(true);
        searchResults.getDebitors().get(1).setIncasso(true);

        //only needed for refresh after reset
        mpb.setMandantid("2");
        mpb.setRecipientID("112");

        mpb.setSearchResults(searchResults);
        mpb.resetIncassoFlag();

        List<DataLogDataChanges> datalog = emHV.createQuery("From DataLogDataChanges", DataLogDataChanges.class).getResultList();

        assertThat(datalog.get(0).getDcRecordID(), equalTo(new Integer(11)));

    }
}
