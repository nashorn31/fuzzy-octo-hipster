package resetFlag;

import hibernateEntitySets.TAggregated_Data;
import informations.Debitor;
import informations.Recipient;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;

import changelog.ChangeLog;
import databaseconnection.InitEntityManager;

public class ResetFlag {

    private EntityManager entityManagerHV;

    public ResetFlag(EntityManager entityManagerHV) {
        this.entityManagerHV = entityManagerHV;

    }

    /**
     * reset the incassoFlag for selected the recipients and debitors
     */
    public void resetFlag(List<Recipient> selectedRecipientsList, List<Debitor> selectedDebitorsList) {

        //get a list with all aggregatedDataIDs
        ArrayList<String> aggregatedDataIDList = createAggregatedDataIDList(selectedRecipientsList, selectedDebitorsList);

        if (!aggregatedDataIDList.isEmpty()) {

            List<TAggregated_Data> aggregatedDataList = createAggregatedDataList(aggregatedDataIDList);

            //changes datasets
            changeAndLogDataSets(aggregatedDataList);

            //refresh EntityMangers so the actual values are displayed
            InitEntityManager.refreshEntityManagers();

        }

    }

    /**
     * create a list with all aggregatedDataID where the incassoFlag should be reseted
     * @return list with all aggregatedDataID
     */
    public ArrayList<String> createAggregatedDataIDList(List<Recipient> recipientsList, List<Debitor> debitorsList) {

        ArrayList<String> aggregatedDataIDList = new ArrayList<String>();

        // add all recipients to the ArrayList
        for (Recipient recipient : recipientsList) {
            if (recipient.isIncasso()) {
                aggregatedDataIDList.add(recipient.getRecipientID());
            }
        }

        // add all debitors to the ArrayList
        for (Debitor debitor : debitorsList) {
            if (debitor.isIncasso()) {
                aggregatedDataIDList.add(debitor.getDebitorID());
            }
        }
        return aggregatedDataIDList;
    }

    /**
     * get all aggregatedData datasets which should be modified 
     * @param aggregatedDataIDList list of the IDs of the aggregatedData
     * @return aggregatedDataSets aggregatedData datasets with ID
     */
    public List<TAggregated_Data> createAggregatedDataList(ArrayList<String> aggregatedDataIDList) {

        // create where clause (String)
        StringBuffer confirmTesxtBuffer = new StringBuffer("WHERE 1=2");
        for (String aggregatedDataID : aggregatedDataIDList) {
            confirmTesxtBuffer.append(" OR aggregated_Data_ID = '").append(aggregatedDataID).append("'");
        }

        // Create SQL Query
        return entityManagerHV.createQuery("FROM TAggregated_Data " + confirmTesxtBuffer.toString(), TAggregated_Data.class).getResultList();
    }

    /**
     * make the changes at the data set and log it
     * 
     * @param aggregatedData
     *            data set to modify
     *            
     * @return list of all datalogs
     */
    public void changeAndLogDataSets(List<TAggregated_Data> aggregatedDataList) {

        // make the same changes for every dataset and create a log
        for (TAggregated_Data aggregatedData : aggregatedDataList) {

            //class to createLog
            ChangeLog changeLog = new ChangeLog(entityManagerHV);

            // create the basic for the log
            changeLog.setAggregatedDataLogBasic(aggregatedData);

            changeLog.setOldValue(aggregatedData);

            entityManagerHV.getTransaction().begin();
            // make the changes
            aggregatedData.setIncasso(false);
            aggregatedData.setModification_date(new Date());

            entityManagerHV.getTransaction().commit();

            //Log the changes
            entityManagerHV.getTransaction().begin();
            changeLog.log();
            entityManagerHV.getTransaction().commit();

            // set the new values
            changeLog.setNewValue(aggregatedData);
        }
    }

}
