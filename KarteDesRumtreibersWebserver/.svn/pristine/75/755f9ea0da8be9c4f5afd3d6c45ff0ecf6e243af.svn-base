package changelogTest;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.IsEqual.equalTo;
import static org.junit.Assert.assertEquals;
import hibernateentitysets.DataLogDataChanges;
import hibernateentitysets.TAggregatedData;

import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;

import org.junit.Before;
import org.junit.Test;

import changelog.ChangeLog;
import databaseconnectionTest.InitTestConnection;

public class ChangeLogTest {

    private TAggregatedData aggregatedData;
    private ChangeLog       changeLog;
    private EntityManager   emHV;

    @Before
    public void createAggregatedData() {
        InitTestConnection.setDBvaluesToStart();
        emHV = InitTestConnection.getHVTestEntityManager();
        this.aggregatedData = InitTestConnection.getNHVTestEntityManager().createQuery("FROM TAggregatedData WHERE aggregatedDataID=16", TAggregatedData.class)
                .getResultList().get(0);
        this.changeLog = new ChangeLog(emHV);
    }

    @Test
    public void getDataLogBasicTest() {

        changeLog.setAggregatedDataLogBasic(aggregatedData);

        DataLogDataChanges datalog = changeLog.getDataLog();

        assertThat(datalog.getDcApplicationName(), equalTo("INC"));
        assertThat(datalog.getDcDvType(), equalTo((short) 2));
        assertThat(datalog.getDcForeignID(), equalTo(0));
        assertThat(datalog.getDcLabel(), equalTo(null));
        assertThat(datalog.getDcNodeID(), equalTo(20600));
        assertThat(datalog.getDcReason(), equalTo(null));
        assertThat(datalog.getDcRecordID(), equalTo(16));
        assertEquals(datalog.getDcDateInserted().after(new Date(System.currentTimeMillis() + 100)), false);
    }

    @Test
    public void createXMLStringTest() {

        assertThat(
                changeLog.createXMLString(aggregatedData),
                equalTo("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><object_value><aggregated_data_id>16</aggregated_data_id><safe_order_payment_info_id>397</safe_order_payment_info_id><unsafe_order_payment_info_id>398</unsafe_order_payment_info_id><current_saldo>0.00</current_saldo><max_saldo_ever>0.00</max_saldo_ever><current_dunning_level>0</current_dunning_level><max_dunning_level_ever>0</max_dunning_level_ever><sales_volume>0.00</sales_volume><total_return_debit_note_count>0</total_return_debit_note_count><date_of_last_return_debit_note>NULL</date_of_last_return_debit_note><max_transactional_saldo_diff>0.00</max_transactional_saldo_diff><has_used_installement_payment>false</has_used_installement_payment><incasso>false</incasso><chargeback_count>0</chargeback_count><delivery_customer_saldo>0.00</delivery_customer_saldo><date_of_last_chargeback>NULL</date_of_last_chargeback><date_of_last_dunning>NULL</date_of_last_dunning><creation_date>2011-08-08 15:56:54.603</creation_date><modification_date>2011-08-08 15:56:54.603</modification_date><total_return_value>0.00</total_return_value><total_order_value>0.00</total_order_value><total_return_count>null</total_return_count><total_order_count>null</total_order_count><current_installment_dunning_level>null</current_installment_dunning_level><max_installment_dunning_level_ever>null</max_installment_dunning_level_ever><current_installment_count>null</current_installment_count><total_installment_count>null</total_installment_count><successful_installment_count>null</successful_installment_count><installment_payment_default_count>null</installment_payment_default_count><max_monthly_installment>null</max_monthly_installment><min_monthly_installment_payment_default>null</min_monthly_installment_payment_default></object_value>"));
    }

    @Test
    public void testLog() {

        changeLog.setAggregatedDataLogBasic(aggregatedData);
        changeLog.setOldValue(aggregatedData);
        changeLog.setNewValue(aggregatedData);

        EntityTransaction transaction = emHV.getTransaction();
        transaction.begin();

        changeLog.log();

        transaction.commit();

        emHV.clear();

        List<DataLogDataChanges> datalogFromDB = emHV.createQuery("FROM DataLogDataChanges", DataLogDataChanges.class).getResultList();

        assertThat(datalogFromDB.get(0).getDcRecordID(), equalTo(16));
    }
}
